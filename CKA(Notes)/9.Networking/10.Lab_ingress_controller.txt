k create namespace ingress-namespace

k delete ns ingress-namespace 

k create namespace ingress-space

k create configmap nginx-configuration -n ingress-space 

k create serviceaccount ingress-serviceaccount -n ingress-space 

k get role -n ingress-space -o yaml
apiVersion: v1
items:
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    creationTimestamp: "2022-09-18T07:43:53Z"
    labels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
    managedFields:
    - apiVersion: rbac.authorization.k8s.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
        f:rules: {}
      manager: python-requests
      operation: Update
      time: "2022-09-18T07:43:53Z"
    name: ingress-role
    namespace: ingress-space
    resourceVersion: "3775"
    uid: fa673aae-57a0-464e-88ca-39b6f87b2b76
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - pods
    - secrets
    - namespaces
    verbs:
    - get
  - apiGroups:
    - ""
    resourceNames:
    - ingress-controller-leader-nginx
    resources:
    - configmaps
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - get
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""




k get rolebindings.rbac.authorization.k8s.io -n ingress-space -o yaml
apiVersion: v1
items:
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    creationTimestamp: "2022-09-18T07:43:53Z"
    labels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
    managedFields:
    - apiVersion: rbac.authorization.k8s.io/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
        f:roleRef:
          f:apiGroup: {}
          f:kind: {}
          f:name: {}
        f:subjects: {}
      manager: python-requests
      operation: Update
      time: "2022-09-18T07:43:53Z"
    name: ingress-role-binding
    namespace: ingress-space
    resourceVersion: "3776"
    uid: 811b63c2-a493-4966-88eb-7861b07a7a96
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: ingress-role
  subjects:
  - kind: ServiceAccount
    name: ingress-serviceaccount
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""



  cat ingress-controller.yaml 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-controller
  namespace: ingress-space
spec:
  replicas: 1
  selector:
    matchLabels:
      name: nginx-ingress
  template:
    metadata:
      labels:
        name: nginx-ingress
    spec:
      serviceAccountName: ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --default-backend-service=app-space/default-http-backend
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443    





apiVersion: v1
kind: Service
metadata:
  name: ingress
  namespace: ingress-space
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    nodePort: 30080
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    name: nginx-ingress


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  namespace: ingress-space 
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx-example
  rules:
  - http:
      paths:
      - path: /wear
        pathType: Prefix
        backend:
          service:
            name: test
            port:
              number: 80
        - path: /watch 
          pathType: Prefix
          backend:
            service:
              name: test
              port:
                number: 80